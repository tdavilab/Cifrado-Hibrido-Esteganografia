#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    May 19, 2020 12:39:45 PM EDT  platform: Windows NT

import sys
from Facade import Facade
from threading import Thread
from tkinter import messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from PIL import Image, ImageTk
from tkinter import filedialog


import os.path


def escuchar():
    while True:
        #Facade.getInstance().registrar_gui(top)
        if Facade.getInstance().app != None:
            #Facade.getInstance().registrar_gui(top)
            Facade.getInstance().escuchar_mensajes()
        #root.update()

t = Thread(target=escuchar)

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = main_window (root)
    Facade.getInstance().registrar_gui(top)
    
    t.daemon = True
    t.start() # start the thread in the background
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    """
    while True:
        Facade.getInstance().registrar_gui(top)
        if Facade.getInstance().app != None:
            Facade.getInstance().registrar_gui(top)
            Facade.getInstance().escuchar_mensajes()          
        root.update()"""

    root.mainloop()

w = None

def on_closing():
    if messagebox.askokcancel("Cerrar", "Se cerrará la aplicación?"):
        root.destroy()
        sys.exit() 


class main_window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("590x448+318+138")
        top.minsize(120, 1)
        top.maxsize(1916, 1821)
        top.resizable(1, 1)
        top.title("Aplicación Intercambio Seguro de Archivos")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.notebook = ttk.Notebook(top)
        self.notebook.place(relx=-0.017, rely=0.089, relheight=0.893
                , relwidth=1.01)
        self.notebook.configure(takefocus="")
        self.notebookt1 = tk.Frame(self.notebook)
        self.notebook.add(self.notebookt1, padding=3)
        self.notebook.tab(0, text="   Cifrado",compound="left",underline="-1",)
        self.notebookt1.configure(background="#d9d9d9")
        self.notebookt1.configure(highlightbackground="#d9d9d9")
        self.notebookt1.configure(highlightcolor="black")
        self.notebookt3_5 = tk.Frame(self.notebook)
        self.notebook.add(self.notebookt3_5, padding=3)
        self.notebook.tab(1, text="Descifrado",compound="none",underline="-1",)
        self.notebookt3_5.configure(background="#d9d9d9")
        self.notebookt3_5.configure(highlightbackground="#d9d9d9")
        self.notebookt3_5.configure(highlightcolor="black")

        self.frame_conexion = tk.Frame(self.notebookt1)
        self.frame_conexion.place(relx=0.034, rely=0.027, relheight=0.307
                , relwidth=0.465)
        self.frame_conexion.configure(relief='groove')
        self.frame_conexion.configure(borderwidth="2")
        self.frame_conexion.configure(relief="groove")
        self.frame_conexion.configure(background="#d9d9d9")
        self.frame_conexion.configure(highlightbackground="#d9d9d9")
        self.frame_conexion.configure(highlightcolor="black")

        self.lbl_conexion = tk.Label(self.frame_conexion)
        self.lbl_conexion.place(relx=0.036, rely=0.087, height=17, width=68)
        self.lbl_conexion.configure(activebackground="#f9f9f9")
        self.lbl_conexion.configure(activeforeground="black")
        self.lbl_conexion.configure(background="#d9d9d9")
        self.lbl_conexion.configure(disabledforeground="#a3a3a3")
        self.lbl_conexion.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lbl_conexion.configure(foreground="#000000")
        self.lbl_conexion.configure(highlightbackground="#d9d9d9")
        self.lbl_conexion.configure(highlightcolor="black")
        self.lbl_conexion.configure(text='''CONEXIÓN''')

        self.lbl_host = ttk.Label(self.frame_conexion)
        self.lbl_host.place(relx=0.073, rely=0.261, height=17, width=31)
        self.lbl_host.configure(background="#d9d9d9")
        self.lbl_host.configure(foreground="#000000")
        self.lbl_host.configure(font="-family {Segoe UI} -size 8")
        self.lbl_host.configure(relief="flat")
        self.lbl_host.configure(anchor='w')
        self.lbl_host.configure(justify='left')
        self.lbl_host.configure(text='''Host:''')

        self.txt_host = ttk.Entry(self.frame_conexion)
        self.txt_host.place(relx=0.182, rely=0.261, relheight=0.183
                , relwidth=0.276)
        self.txt_host.configure(takefocus="")


        self.btn_iniciar_cliente = ttk.Button(self.frame_conexion)
        self.btn_iniciar_cliente.place(relx=0.509, rely=0.522, height=25
                , width=129)
        self.btn_iniciar_cliente.configure(takefocus="")
        self.btn_iniciar_cliente.configure(text='''Conectarse a Servidor''')

        self.btn_iniciar_servidor = ttk.Button(self.frame_conexion)
        self.btn_iniciar_servidor.place(relx=0.509, rely=0.261, height=25
                , width=128)
        self.btn_iniciar_servidor.configure(takefocus="")
        self.btn_iniciar_servidor.configure(text='''Iniciar Servidor''')

        self.lbl_info_conexion = ttk.Label(self.frame_conexion)
        self.lbl_info_conexion.place(relx=0.073, rely=0.783, height=19
                , width=246)
        self.lbl_info_conexion.configure(background="#d9d9d9")
        self.lbl_info_conexion.configure(foreground="#000000")
        self.lbl_info_conexion.configure(font="-family {Segoe UI} -size 8")
        self.lbl_info_conexion.configure(relief="flat")
        self.lbl_info_conexion.configure(anchor='w')
        self.lbl_info_conexion.configure(justify='left')
        self.lbl_info_conexion.configure(text='''Ingresar host y port para conectarse o iniciar''')

        self.lbl_port = ttk.Label(self.frame_conexion)
        self.lbl_port.place(relx=0.073, rely=0.522, height=17, width=31)
        self.lbl_port.configure(background="#d9d9d9")
        self.lbl_port.configure(foreground="#000000")
        self.lbl_port.configure(font="-family {Segoe UI} -size 8")
        self.lbl_port.configure(relief="flat")
        self.lbl_port.configure(anchor='w')
        self.lbl_port.configure(justify='left')
        self.lbl_port.configure(text='''Port:''')

        self.txt_port = ttk.Entry(self.frame_conexion)
        self.txt_port.place(relx=0.182, rely=0.522, relheight=0.183
                , relwidth=0.276)
        self.txt_port.configure(takefocus="")


        self.frame_archivo = tk.Frame(self.notebookt1)
        self.frame_archivo.place(relx=0.524, rely=0.027, relheight=0.307
                , relwidth=0.465)
        self.frame_archivo.configure(relief='groove')
        self.frame_archivo.configure(borderwidth="2")
        self.frame_archivo.configure(relief="groove")
        self.frame_archivo.configure(background="#d9d9d9")
        self.frame_archivo.configure(highlightbackground="#d9d9d9")
        self.frame_archivo.configure(highlightcolor="black")

        self.lbl_conexion_2 = tk.Label(self.frame_archivo)
        self.lbl_conexion_2.place(relx=0.036, rely=0.087, height=17, width=128)
        self.lbl_conexion_2.configure(activebackground="#f9f9f9")
        self.lbl_conexion_2.configure(activeforeground="black")
        self.lbl_conexion_2.configure(background="#d9d9d9")
        self.lbl_conexion_2.configure(disabledforeground="#a3a3a3")
        self.lbl_conexion_2.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lbl_conexion_2.configure(foreground="#000000")
        self.lbl_conexion_2.configure(highlightbackground="#d9d9d9")
        self.lbl_conexion_2.configure(highlightcolor="black")
        self.lbl_conexion_2.configure(text='''ARCHIVO SECRETO''')

        self.btn_examinar_archivo = ttk.Button(self.frame_archivo)
        self.btn_examinar_archivo.place(relx=0.073, rely=0.261, height=25
                , width=58)
        self.btn_examinar_archivo.configure(takefocus="")
        self.btn_examinar_archivo.configure(text='''Examinar''')

        self.lbl_info_exar = ttk.Label(self.frame_archivo)
        self.lbl_info_exar.place(relx=0.291, rely=0.261, height=19, width=176)
        self.lbl_info_exar.configure(background="#d9d9d9")
        self.lbl_info_exar.configure(foreground="#000000")
        self.lbl_info_exar.configure(font="-family {Segoe UI} -size 8")
        self.lbl_info_exar.configure(relief="flat")
        self.lbl_info_exar.configure(anchor='w')
        self.lbl_info_exar.configure(justify='left')
        self.lbl_info_exar.configure(text='''No se ha subido ningún archivo''')

        self.lbl_clave = ttk.Label(self.frame_archivo)
        self.lbl_clave.place(relx=0.073, rely=0.696, height=17, width=41)
        self.lbl_clave.configure(background="#d9d9d9")
        self.lbl_clave.configure(foreground="#000000")
        self.lbl_clave.configure(font="-family {Segoe UI} -size 8")
        self.lbl_clave.configure(relief="flat")
        self.lbl_clave.configure(anchor='w')
        self.lbl_clave.configure(justify='left')
        self.lbl_clave.configure(text='''Clave:''')

        self.txt_clave = ttk.Entry(self.frame_archivo)
        self.txt_clave.place(relx=0.218, rely=0.696, relheight=0.183
                , relwidth=0.676)
        self.txt_clave.configure(takefocus="")


        self.lbl_bits_archivo = ttk.Label(self.frame_archivo)
        self.lbl_bits_archivo.place(relx=0.291, rely=0.435, height=17, width=41)
        self.lbl_bits_archivo.configure(background="#d9d9d9")
        self.lbl_bits_archivo.configure(foreground="#000000")
        self.lbl_bits_archivo.configure(font="-family {Segoe UI} -size 8 -weight bold")
        self.lbl_bits_archivo.configure(relief="flat")
        self.lbl_bits_archivo.configure(anchor='w')
        self.lbl_bits_archivo.configure(justify='left')
        self.lbl_bits_archivo.configure(text='''Bits''')

        self.TSeparator1 = ttk.Separator(self.frame_archivo)
        self.TSeparator1.place(relx=0.087, rely=0.617, relwidth=0.847)

        self.frame_original = tk.Frame(self.notebookt1)
        self.frame_original.place(relx=0.034, rely=0.374, relheight=0.575
                , relwidth=0.465)
        self.frame_original.configure(relief='groove')
        self.frame_original.configure(borderwidth="2")
        self.frame_original.configure(relief="groove")
        self.frame_original.configure(background="#d9d9d9")
        self.frame_original.configure(highlightbackground="#d9d9d9")
        self.frame_original.configure(highlightcolor="black")

        self.lbl_original = tk.Label(self.frame_original)
        self.lbl_original.place(relx=0.036, rely=0.047, height=17, width=118)
        self.lbl_original.configure(activebackground="#f9f9f9")
        self.lbl_original.configure(activeforeground="black")
        self.lbl_original.configure(background="#d9d9d9")
        self.lbl_original.configure(disabledforeground="#a3a3a3")
        self.lbl_original.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lbl_original.configure(foreground="#000000")
        self.lbl_original.configure(highlightbackground="#d9d9d9")
        self.lbl_original.configure(highlightcolor="black")
        self.lbl_original.configure(text='''IMAGEN ORIGINAL''')

        self.btn_examinar_imagen = ttk.Button(self.frame_original)
        self.btn_examinar_imagen.place(relx=0.073, rely=0.14, height=25
                , width=58)
        self.btn_examinar_imagen.configure(takefocus="")
        self.btn_examinar_imagen.configure(text='''Examinar''')

        self.lbl_info_eximg = ttk.Label(self.frame_original)
        self.lbl_info_eximg.place(relx=0.291, rely=0.14, height=19, width=176)
        self.lbl_info_eximg.configure(background="#d9d9d9")
        self.lbl_info_eximg.configure(foreground="#000000")
        self.lbl_info_eximg.configure(font="-family {Segoe UI} -size 8")
        self.lbl_info_eximg.configure(relief="flat")
        self.lbl_info_eximg.configure(anchor='w')
        self.lbl_info_eximg.configure(justify='left')
        self.lbl_info_eximg.configure(text='''No se ha subido ningún archivo''')

        self.lbl_bits_img = ttk.Label(self.frame_original)
        self.lbl_bits_img.place(relx=0.291, rely=0.233, height=17, width=41)
        self.lbl_bits_img.configure(background="#d9d9d9")
        self.lbl_bits_img.configure(foreground="#000000")
        self.lbl_bits_img.configure(font="-family {Segoe UI} -size 8 -weight bold")
        self.lbl_bits_img.configure(relief="flat")
        self.lbl_bits_img.configure(anchor='w')
        self.lbl_bits_img.configure(justify='left')
        self.lbl_bits_img.configure(text='''Bits''')

        self.img_original = ttk.Button(self.frame_original)
        self.img_original.place(relx=0.036, rely=0.372, height=120, width=120)
        self.img_original.configure(takefocus="")

        self.img_original_entropia = ttk.Button(self.frame_original)
        self.img_original_entropia.place(relx=0.509, rely=0.372, height=120
                , width=120)
        self.img_original_entropia.configure(takefocus="")
        

        self.frame_nueva = tk.Frame(self.notebookt1)
        self.frame_nueva.place(relx=0.524, rely=0.374, relheight=0.575
                , relwidth=0.465)
        self.frame_nueva.configure(relief='groove')
        self.frame_nueva.configure(borderwidth="2")
        self.frame_nueva.configure(relief="groove")
        self.frame_nueva.configure(background="#d9d9d9")
        self.frame_nueva.configure(highlightbackground="#d9d9d9")
        self.frame_nueva.configure(highlightcolor="black")

        self.lbl_nueva = tk.Label(self.frame_nueva)
        self.lbl_nueva.place(relx=0.036, rely=0.047, height=17, width=108)
        self.lbl_nueva.configure(activebackground="#f9f9f9")
        self.lbl_nueva.configure(activeforeground="black")
        self.lbl_nueva.configure(background="#d9d9d9")
        self.lbl_nueva.configure(disabledforeground="#a3a3a3")
        self.lbl_nueva.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lbl_nueva.configure(foreground="#000000")
        self.lbl_nueva.configure(highlightbackground="#d9d9d9")
        self.lbl_nueva.configure(highlightcolor="black")
        self.lbl_nueva.configure(text='''NUEVA IMAGEN''')

        self.btn_cifrar = ttk.Button(self.frame_nueva)
        self.btn_cifrar.place(relx=0.073, rely=0.14, height=25, width=68)
        self.btn_cifrar.configure(takefocus="")
        self.btn_cifrar.configure(text='''Cifrar''')

        self.lbl_info_cifrar = ttk.Label(self.frame_nueva)
        self.lbl_info_cifrar.place(relx=0.073, rely=0.279, height=19, width=236)
        self.lbl_info_cifrar.configure(background="#d9d9d9")
        self.lbl_info_cifrar.configure(foreground="#000000")
        self.lbl_info_cifrar.configure(font="-family {Segoe UI} -size 8")
        self.lbl_info_cifrar.configure(relief="flat")
        self.lbl_info_cifrar.configure(anchor='w')
        self.lbl_info_cifrar.configure(justify='left')
        self.lbl_info_cifrar.configure(text='''No se ha cifrado''')

        self.btn_enviar = ttk.Button(self.frame_nueva)
        self.btn_enviar.place(relx=0.364, rely=0.14, height=25, width=68)
        self.btn_enviar.configure(takefocus="")
        self.btn_enviar.configure(text='''Enviar''')

        self.btn_guardar = ttk.Button(self.frame_nueva)
        self.btn_guardar.place(relx=0.655, rely=0.14, height=25, width=68)
        self.btn_guardar.configure(takefocus="")
        self.btn_guardar.configure(text='''Guardar''')

        self.img_nueva = ttk.Button(self.frame_nueva)
        self.img_nueva.place(relx=0.036, rely=0.372, height=120, width=120)
        self.img_nueva.configure(takefocus="")

        self.img_nueva_entropia = ttk.Button(self.frame_nueva)
        self.img_nueva_entropia.place(relx=0.509, rely=0.372, height=120
                , width=120)
        self.img_nueva_entropia.configure(takefocus="")

        self.frame_descifrar = tk.Frame(self.notebookt3_5)
        self.frame_descifrar.place(relx=0.524, rely=0.027, relheight=0.495
                , relwidth=0.465)
        self.frame_descifrar.configure(relief='groove')
        self.frame_descifrar.configure(borderwidth="2")
        self.frame_descifrar.configure(relief="groove")
        self.frame_descifrar.configure(background="#d9d9d9")
        self.frame_descifrar.configure(highlightbackground="#d9d9d9")
        self.frame_descifrar.configure(highlightcolor="black")

        self.lbl_descifrar = tk.Label(self.frame_descifrar)
        self.lbl_descifrar.place(relx=0.036, rely=0.054, height=17, width=188)
        self.lbl_descifrar.configure(activebackground="#f9f9f9")
        self.lbl_descifrar.configure(activeforeground="black")
        self.lbl_descifrar.configure(background="#d9d9d9")
        self.lbl_descifrar.configure(disabledforeground="#a3a3a3")
        self.lbl_descifrar.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lbl_descifrar.configure(foreground="#000000")
        self.lbl_descifrar.configure(highlightbackground="#d9d9d9")
        self.lbl_descifrar.configure(highlightcolor="black")
        self.lbl_descifrar.configure(text='''OBTENER ARCHIVO SECRETO''')

        self.btn_guardar_2 = ttk.Button(self.frame_descifrar)
        self.btn_guardar_2.place(relx=0.073, rely=0.649, height=25, width=58)
        self.btn_guardar_2.configure(takefocus="")
        self.btn_guardar_2.configure(text='''Guardar''')

        self.lbl_info_guardar = ttk.Label(self.frame_descifrar)
        self.lbl_info_guardar.place(relx=0.291, rely=0.649, height=19, width=176)

        self.lbl_info_guardar.configure(background="#d9d9d9")
        self.lbl_info_guardar.configure(foreground="#000000")
        self.lbl_info_guardar.configure(font="-family {Segoe UI} -size 8")
        self.lbl_info_guardar.configure(relief="flat")
        self.lbl_info_guardar.configure(anchor='w')
        self.lbl_info_guardar.configure(justify='left')
        self.lbl_info_guardar.configure(text='''No se ha subido ningún archivo''')

        self.TSeparator1_7 = ttk.Separator(self.frame_descifrar)
        self.TSeparator1_7.place(relx=0.08, rely=0.497, relwidth=0.844)

        self.btn_descifrar = ttk.Button(self.frame_descifrar)
        self.btn_descifrar.place(relx=0.073, rely=0.27, height=25, width=58)
        self.btn_descifrar.configure(takefocus="")
        self.btn_descifrar.configure(text='''Descifrar''')

        self.lbl_info_descifrar = ttk.Label(self.frame_descifrar)
        self.lbl_info_descifrar.place(relx=0.291, rely=0.27, height=19
                , width=126)
        self.lbl_info_descifrar.configure(background="#d9d9d9")
        self.lbl_info_descifrar.configure(foreground="#000000")
        self.lbl_info_descifrar.configure(font="-family {Segoe UI} -size 8")
        self.lbl_info_descifrar.configure(relief="flat")
        self.lbl_info_descifrar.configure(anchor='w')
        self.lbl_info_descifrar.configure(justify='left')
        self.lbl_info_descifrar.configure(text='''No se ha descifrado''')

        self.frame_recibida = tk.Frame(self.notebookt3_5)
        self.frame_recibida.place(relx=0.034, rely=0.027, relheight=0.495
                , relwidth=0.465)
        self.frame_recibida.configure(relief='groove')
        self.frame_recibida.configure(borderwidth="2")
        self.frame_recibida.configure(relief="groove")
        self.frame_recibida.configure(background="#d9d9d9")
        self.frame_recibida.configure(highlightbackground="#d9d9d9")
        self.frame_recibida.configure(highlightcolor="black")

        self.lblconexion_5 = tk.Label(self.frame_recibida)
        self.lblconexion_5.place(relx=0.036, rely=0.054, height=17, width=118)
        self.lblconexion_5.configure(activebackground="#f9f9f9")
        self.lblconexion_5.configure(activeforeground="black")
        self.lblconexion_5.configure(background="#d9d9d9")
        self.lblconexion_5.configure(disabledforeground="#a3a3a3")
        self.lblconexion_5.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.lblconexion_5.configure(foreground="#000000")
        self.lblconexion_5.configure(highlightbackground="#d9d9d9")
        self.lblconexion_5.configure(highlightcolor="black")
        self.lblconexion_5.configure(text='''IMAGEN RECIBIDA''')

        self.lbl_info_recibida = ttk.Label(self.frame_recibida)
        self.lbl_info_recibida.place(relx=0.036, rely=0.162, height=19
                , width=172)
        self.lbl_info_recibida.configure(background="#d9d9d9")
        self.lbl_info_recibida.configure(foreground="#ff0000")
        self.lbl_info_recibida.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lbl_info_recibida.configure(relief="flat")
        self.lbl_info_recibida.configure(anchor='w')
        self.lbl_info_recibida.configure(justify='left')
        self.lbl_info_recibida.configure(text='''No se han recibido imagenes''')

        self.img_recibida = ttk.Button(self.frame_recibida)
        self.img_recibida.place(relx=0.036, rely=0.27, height=120, width=120)
        self.img_recibida.configure(takefocus="")

        self.img_recibida_entropia = ttk.Button(self.frame_recibida)
        self.img_recibida_entropia.place(relx=0.509, rely=0.27, height=120
                , width=120)
        self.img_recibida_entropia.configure(takefocus="")

        
        self.btn_actualizar = ttk.Button(self.frame_recibida)
        self.btn_actualizar.place(relx=0.727, rely=0.054, height=25, width=66)
        self.btn_actualizar.configure(takefocus="")
        self.btn_actualizar.configure(text='''Actualizar''')


        self.lbl_titulo = ttk.Label(top)
        self.lbl_titulo.place(relx=0.068, rely=0.0, height=29, width=503)
        self.lbl_titulo.configure(background="#d9d9d9")
        self.lbl_titulo.configure(foreground="#000000")
        self.lbl_titulo.configure(font="-family {Sitka Display} -size 15 -weight bold")
        self.lbl_titulo.configure(relief="flat")
        self.lbl_titulo.configure(anchor='w')
        self.lbl_titulo.configure(justify='center')
        self.lbl_titulo.configure(text='''Aplicación Intercambio de Imágenes con Contenido Secreto''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        # Botones Definidos
        self.btn_iniciar_cliente.configure(command=lambda: self.inicializar_peer("Cliente"))
        self.btn_iniciar_servidor.configure(command=lambda: self.inicializar_peer("Servidor"))


        self.btn_examinar_archivo.configure(command=lambda: self.examinar_archivo())
        self.btn_examinar_imagen.configure(command=lambda: self.examinar_imagen())
        self.btn_cifrar.configure(command=lambda: self.cifrar())
        self.btn_enviar.configure(command=lambda: self.enviar())
        self.btn_guardar.configure(command=lambda: self.action_btn_guardar1())
        self.btn_guardar_2.configure(command=lambda: self.action_btn_guardar2())
        self.btn_descifrar.configure(command=lambda: self.descifrar())
        self.btn_actualizar.configure(command=lambda: self.actualizar())

        self.img_original.configure(command=lambda: self.ampliar_imagen('original'))
        self.img_original_entropia.configure(command=lambda: self.ampliar_imagen('original_entropia'))
        self.img_nueva.configure(command=lambda: self.ampliar_imagen('nueva'))
        self.img_nueva_entropia.configure(command=lambda: self.ampliar_imagen('nueva_entropia'))
        self.img_recibida.configure(command=lambda: self.ampliar_imagen('recibida'))
        self.img_recibida_entropia.configure(command=lambda: self.ampliar_imagen('recibida_entropia'))
        

        self.txt_host.insert(0,"localhost")
        self.txt_port.insert(0,"1234")
        

    def inicializar_peer(self, tipo):
        print(f"Se inicializa el {tipo}")
        host = self.txt_host.get()
        port = int(self.txt_port.get())
        f = Facade.getInstance()
        f.crear_socket(host, port)
        if tipo == "Cliente":
            validacion = f.iniciar_cliente()
        elif tipo == "Servidor":
            validacion = f.iniciar_servidor()
            print(validacion)
            self.lbl_info_conexion.configure(text=validacion)   
            validacion = f.esperar_conexiones()
        self.lbl_info_conexion.configure(text=validacion)   
        print(validacion)


    def examinar_archivo(self):
        ruta = filedialog.askopenfilename(defaultextension=".txt")
        #ruta = "example.txt"
        
        self.lbl_info_exar.configure(text='')
        self.lbl_info_exar.configure(text=ruta)
        
        f = Facade.getInstance()
        num_bytes = f.abrir_archivo(ruta)

        
        self.lbl_bits_archivo.configure(text='')
        self.lbl_bits_archivo.configure(text=str(num_bytes))

    def examinar_imagen(self):
        ruta = filedialog.askopenfilename(defaultextension=".txt")
        #ruta = "example.jpg"
        
        self.lbl_info_eximg.configure(text='')
        self.lbl_info_eximg.configure(text=ruta)
        
        f = Facade.getInstance()
        num_bytes = f.abrir_imagen(ruta)

        self.lbl_bits_img.configure(text='')
        self.lbl_bits_img.configure(text=str(num_bytes))

        img, img_e = f.obtener_miniaturas(f.encoder)

        self.mostrar_imagenes(img, img_e, 'original')

    def cifrar(self):

        f = Facade.getInstance()

        if f.check_size():
            newimg, newimg_e = f.cifrar()
            self.lbl_info_cifrar.configure(text='')
            self.lbl_info_cifrar.configure(text='Se ha cifrado el archivo correctamente')
            self.mostrar_imagenes(newimg, newimg_e, 'nueva')
        else:
            self.lbl_info_cifrar.configure(text='')
            self.lbl_info_cifrar.configure(text='Tamaño del archivo es superior al de la imagen')

    def ampliar_imagen(self, name):
        f = Facade.getInstance()
        f.ampliar_imagen(name)

    def enviar(self):
        f = Facade.getInstance()
        f.enviar_mensaje()
        
        self.lbl_info_cifrar.configure(text='')
        self.lbl_info_cifrar.configure(text='Se ha enviado la imagen correctamente')

    def descifrar(self):
        f = Facade.getInstance()
        f.descifrar()
        
        self.lbl_info_descifrar.configure(text='')
        self.lbl_info_descifrar.configure(text='Se ha descifrado el archivo correctamente')

    def action_btn_guardar1(self):
        f = Facade.getInstance()
        ruta = filedialog.asksaveasfilename(defaultextension=".png")
        f.guardar_imagen(ruta)

        self.lbl_info_cifrar.configure(text='')
        self.lbl_info_cifrar.configure(text='Se ha guardado la imagen correctamente')
        

    def action_btn_guardar2(self):
        f = Facade.getInstance()
        ruta = filedialog.asksaveasfilename(defaultextension=".txt")
        f.guardar_archivo(ruta)

        self.lbl_info_guardar.configure(text='')
        self.lbl_info_guardar.configure(text='Se ha guardado el archivo correctamente')
    
    def actualizar(self):
        try:
            f = Facade.getInstance()
            img, img_e = f.obtener_miniaturas(f.decoder)
            self.mostrar_imagenes(img, img_e, 'recibida')
        except:
            pass

####################################################################################

    def mostrar_imagenes(self, img, img_e, tipo):

        img = Image.fromarray(img)
        img_e = Image.fromarray(img_e)

        im = ImageTk.PhotoImage(image=img)
        im_e = ImageTk.PhotoImage(image=img_e)
        
        if tipo == 'original':
            self.img_original.configure(image=im)        
            self.img_original_entropia.configure(image=im_e)
        elif tipo == 'nueva':
            self.img_nueva.configure(image=im)
            self.img_nueva_entropia.configure(image=im_e)
        else:
            self.img_recibida.configure(image=im)
            self.img_recibida_entropia.configure(image=im_e)
            self.lbl_info_recibida.configure(text='')
            self.lbl_info_recibida.configure(text='Se ha recibido una imagen')
        root.mainloop()

    def obtener_clave(self):
        return self.txt_clave.get()

        
if __name__ == '__main__':
    facade = Facade()
    vp_start_gui()




